// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  username  String?  @unique
  bio       String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Auth
  emailVerified DateTime?
  password      String?

  // Relations
  posts     Post[]
  watchlist Watchlist[]
  likes     Like[]
  comments  Comment[]

  @@map("users")
}

model Post {
  id          String   @id @default(cuid())
  title       String?
  content     String
  imageUrl    String?
  type        PostType @default(MEME)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  likes    Like[]
  comments Comment[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Watchlist {
  id        String   @id @default(cuid())
  animeId   String
  animeTitle String
  status    WatchStatus @default(PLANNING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, animeId])
  @@map("watchlists")
}

model Poll {
  id        String   @id @default(cuid())
  title     String
  options   Json // Array of poll options
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("polls")
}

enum PostType {
  MEME
  EDIT
  DISCUSSION
}

enum WatchStatus {
  PLANNING
  WATCHING
  COMPLETED
  DROPPED
  ON_HOLD
}